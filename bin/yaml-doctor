#!/usr/bin/env node

/**
 * Copyright (C) 2019-2024, Rob Brackett
 * This is open source software, released under a standard 3-clause
 * BSD-style license; see the file LICENSE for details.
 */

'use strict';

const Batch = require('../lib/batch');
const chalk = require('chalk');
const fsPromises = require('../lib/fs-promises');
const { glob } = require('glob');
const optionator = require('optionator');
const path = require('path');

const optionParser = optionator({
  prepend: 'Check YAML files for syntax errors.\n\nUsage: yaml-doctor [options] <PATH...>',
  options: [
    {
      option: 'help',
      type: 'Boolean',
      description: 'Display list of command-line options'
    },
    {
      option: 'version',
      type: 'Boolean',
      description: 'Show version number'
    },
    {
      option: 'fix',
      type: 'Boolean',
      description: 'Fix any automatically resolvable errors'
    },
    {
      option: 'debug',
      type: 'Boolean',
      description: 'Print debug messages'
    }
  ]
});

function runWithOptions (callback) {
  let options;
  try {
    options = optionParser.parseArgv(process.argv);
  }
  catch (error) {
    console.error(chalk.red(error.message), '\n');
    options = {help: true};
  }

  if (options.help) {
    console.log(optionParser.generateHelp());
  }
  else if (options.version) {
    const version = require(path.join(__dirname, '..', 'package.json')).version;
    console.log('Version', version);
  }
  else if (options._.length === 0) {
    console.error('You must provide at least one path or glob to check');
    process.exitCode = 1;
  }
  else {
    Promise.resolve(callback(options)).catch(error => {
      process.exitCode = 1;
      console.error(error.message);
    });
  }
}

async function normalizePattern (pattern) {
  try {
    const stat = await fsPromises.stat(pattern);
    if (stat.isDirectory()) {
      // TODO: make these extensions customizable
      return path.join(pattern, '**', '*.{yaml,yml,md}');
    }
  }
  catch (error) {
    // Assume this is a glob and just continue on
  }

  return pattern;
}

async function resolvePaths (patterns) {
  // TODO: this is kind of backward -- it expands directories before globbing
  // instead of after, even though a glob could match a directory.
  const normalized = await Promise.all(patterns.map(normalizePattern));
  return await glob(normalized, {realpath: true});
}

runWithOptions(async options => {
  const filePaths = await resolvePaths(options._);

  if (!filePaths.length) {
    console.error('No files matched the given paths');
    process.exitCode = 1;
  }
  else {
    const batch = new Batch(options);
    for (let filePath of filePaths) {
      await batch.reportFile(filePath, null);
    }

    batch.reportSummary();
    batch.setExitCode();
  }
});
