#!/usr/bin/env node

/**
 * Copyright (C) 2019, Rob Brackett
 * This is open source software, released under a standard 3-clause
 * BSD-style license; see the file LICENSE for details.
 */

'use strict';

const chalk = require('chalk');
const format = require('../lib/format');
const optionator = require('optionator');
const path = require('path');
const yamlDoctor = require('..');

const optionParser = optionator({
  prepend: 'Check YAML files for syntax errors.\n\nUsage: yaml-doctor [options] <PATH...>',
  options: [
    {
      option: 'help',
      type: 'Boolean',
      description: 'Display list of command-line options'
    },
    {
      option: 'version',
      type: 'Boolean',
      description: 'Show version number'
    },
    {
      option: 'fix',
      type: 'Boolean',
      description: 'Fix any automatically resolvable errors'
    },
    {
      option: 'debug',
      type: 'Boolean',
      description: 'Print debug messages'
    }
  ]
});

function runWithOptions (callback) {
  let options;
  try {
    options = optionParser.parseArgv(process.argv);
  }
  catch (error) {
    console.error(chalk.red(error.message), '\n');
    options = {help: true};
  }

  if (options.help) {
    console.log(optionParser.generateHelp());
  }
  else if (options.version) {
    const version = require(path.join(__dirname, '..', 'package.json')).version;
    console.log('Version', version);
  }
  else if (options._.length === 0) {
    console.error('You must provide at least one path or glob to check');
    process.exitCode = 1;
  }
  else {
    callback(options);
  }
}

runWithOptions(options => {
  const filePath = options._[0];
  yamlDoctor.checkFile(filePath, null, options)
    .then(result => {
      if (result.issues.length) {
        format.printIssues(filePath, result.issues);
        if (result.issues.some(issue => issue.level === 'error')) {
          process.exitCode = 1;
        }
      }
      else {
        console.log('No issues!');
      }
    })
    .catch(error => {
      if (error.code === 'ENOENT') {
        console.error(`No file at path: ${filePath}`);
      }
      else {
        console.error(error);
      }
      process.exitCode = 1;
    });
});
