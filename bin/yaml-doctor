#!/usr/bin/env node

/**
 * Copyright (C) 2019-2024, Rob Brackett
 * This is open source software, released under a standard 3-clause
 * BSD-style license; see the file LICENSE for details.
 */

'use strict';

const Batch = require('../lib/batch');
const chalk = require('chalk');
const { globIterate } = require('glob');
const { LRUCache } = require('lru-cache');
const optionator = require('optionator');
const path = require('path');

const optionParser = optionator({
  prepend: 'Check YAML files for syntax errors.\n\nUsage: yaml-doctor [options] <PATH...>',
  options: [
    {
      option: 'help',
      type: 'Boolean',
      description: 'Display list of command-line options'
    },
    {
      option: 'version',
      type: 'Boolean',
      description: 'Show version number'
    },
    {
      option: 'fix',
      type: 'Boolean',
      description: 'Fix any automatically resolvable errors'
    },
    {
      option: 'debug',
      type: 'Boolean',
      description: 'Print debug messages'
    }
  ]
});

function runWithOptions (callback) {
  let options;
  try {
    options = optionParser.parseArgv(process.argv);
  }
  catch (error) {
    console.error(chalk.red(error.message), '\n');
    options = {help: true};
  }

  if (options.help) {
    console.log(optionParser.generateHelp());
  }
  else if (options.version) {
    const version = require(path.join(__dirname, '..', 'package.json')).version;
    console.log('Version', version);
  }
  else if (options._.length === 0) {
    console.error('You must provide at least one path or glob to check');
    process.exitCode = 1;
  }
  else {
    Promise.resolve(callback(options)).catch(error => {
      process.exitCode = 1;
      console.error(error.message);
    });
  }
}

function makeDirectoryGlob (directoryPath) {
  return path.join(directoryPath, '**', '*.{yaml,yml,md}');
}

async function * resolvePaths (patterns, cache = null) {
  cache ||= new LRUCache({max: 1_000});

  for await (const entry of globIterate(patterns, {realpath: true, withFileTypes: true})) {
    const fullpath = entry.fullpath();
    if (cache.has(fullpath)) {
      continue;
    }

    cache.set(fullpath, true);
    if (entry.isDirectory()) {
      yield *resolvePaths(makeDirectoryGlob(entry.fullpath()), cache);
    } else {
      yield fullpath;
    }
  }
}

runWithOptions(async options => {
  const batch = new Batch(options);
  for await (const filePath of resolvePaths(options._)) {
    await batch.reportFile(filePath, null);
  }

  if (batch.summary.files === 0) {
    console.error('No files matched the given paths');
    process.exitCode = 1;
  } else {
    batch.reportSummary();
    batch.setExitCode();
  }
});
